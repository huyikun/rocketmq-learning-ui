---
import MobileNavbarSublist from "./MobileNavbarSublist.astro";
import dataSource from "@components/common/Header/navbar.ts";
import { DOCS_ITEM, COMMUNITY_MENU_LIST } from "@/constant";

interface Props {
  top?: "4rem" | "3.5rem";
  class?: string;
}
const { top = "4rem" } = Astro.props;

const sublist = [];
for (let i = 0; i < dataSource.length; i++) {
  const item = dataSource[i];
  let _item = {
    type: "link",
    label: item.label,
    href: item.route,
    isCurrent: false,
  };
  sublist.push(_item);
}
---

<span class="mobile-navbar-wrapper">
  <div class={`mobile-navbar ${Astro.props.class}`}>
    <mobile-menu-button>
      <button aria-expanded="false" aria-label="mobile-menu-button">
        <svg
          viewBox="0 0 1024 1024"
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          p-id="6304"
          width="28"
          height="28"
        >
          <path
            d="M192.037 287.953h640.124c17.673 0 32-14.327 32-32s-14.327-32-32-32H192.037c-17.673 0-32 14.327-32 32s14.327 32 32 32zM832.161 479.169H438.553c-17.673 0-32 14.327-32 32s14.327 32 32 32h393.608c17.673 0 32-14.327 32-32s-14.327-32-32-32zM832.161 735.802H192.037c-17.673 0-32 14.327-32 32s14.327 32 32 32h640.124c17.673 0 32-14.327 32-32s-14.327-32-32-32zM319.028 351.594l-160 160 160 160z"
            class="fill-neutral"
            p-id="6305"
          >
          </path>
        </svg>
      </button>
    </mobile-menu-button>

    <div class="navbar-panel bg-secondary">
      <div class="navbar-content flex">
        <MobileNavbarSublist sublist={sublist} />
      </div>
    </div>
  </div>
</span>

<script>
  class MobileMenuButton extends HTMLElement {
    constructor() {
      super();
      const menuButton = this.querySelector("button")!;
      menuButton.addEventListener("click", (e) => this.toggleExpanded());

      const parentNav = this.closest("nav");
      if (parentNav) {
        parentNav.addEventListener("keyup", (e) =>
          this.closeOnEscape(e, menuButton)
        );
      }
    }

    setExpanded(expanded: boolean) {
      this.setAttribute("aria-expanded", String(expanded));
      document.body.toggleAttribute("data-mobile-menu-expanded", expanded);
    }

    toggleExpanded() {
      // document.body.classList.toggle('overflow-hidden');
      this.setExpanded(this.getAttribute("aria-expanded") !== "true");
    }

    closeOnEscape(e: KeyboardEvent, menuButton) {
      if (e.code === "Escape") {
        this.setExpanded(false);
        menuButton.focus();
      }
    }
  }

  customElements.define("mobile-menu-button", MobileMenuButton);
</script>

<style define:vars={{ top }} is:global>
  .mobile-navbar-wrapper {
    .mobile-navbar button {
      border: 0;
      display: flex;
      align-items: center;
      height: var(--top);
      background-color: transparent;
      cursor: pointer;
    }

    .mobile-navbar .navbar-panel {
      visibility: var(--sl-sidebar-visibility, hidden);
      position: fixed;
      z-index: 5;
      inset-inline-start: 0;
      width: 100%;
      overflow-y: auto;
      height: calc(100vh - var(--top));
    }

    [aria-expanded="true"] ~ .navbar-panel {
      --sl-sidebar-visibility: visible;
    }

    .mobile-navbar .navbar-content {
      height: 100%;
      min-height: max-content;
      padding: 1rem 1rem 0;
      flex-direction: column;
    }
  }
</style>
