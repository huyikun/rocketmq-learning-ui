---
import { useTranslations } from "@i18n/util";
import { twMerge } from "tailwind-merge";
import { ALL_ARTICLE_TAG } from "@/constant";

function formatDate(dateString) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  const date = new Date(dateString);
  return new Intl.DateTimeFormat("zh-CN", options).format(date);
}

const t = useTranslations(Astro);
export type Props = {
  source: string;
  post: {
    slug: string;
    body: string;
    collection: string;
    excerpt?: string;
    data: {
      title: string;
      description: string;
      date: string;
      keywords?: any[];
      img?: string;
      tags?: string[];
      author?: string;
    };
  };
  class?: string;
  useAnchor?: boolean;
  tag?: string;
};

const {
  post,
  source,
  class: className = "",
  useAnchor = false,
  tag = "",
} = Astro.props;
---

<a
  href={tag
    ? `/learning/${tag}/${post.slug}/?source=${source}`
    : `/learning/${post.slug}/?source=${source}`}
  class={twMerge("card bg-card p-[24px] shadow-none w-full flex ", className)}
>
  <!-- {
    useAnchor ? (
      <a id={post.slug} class={"absolute z-[-100] top-[-4rem]"} />
    ) : null
  } -->
  <div class="w-[31.27%] h-[8.625rem] rounded-lg overflow-hidden left-content">
    <img src={post.data?.img} />
  </div>
  <div class="w-[68.73%] pl-[24px] right-content">
    <p class="text-xs font-normal">
      {formatDate(post.data.date)}
    </p>
    <div class="card-title text-title leading-[1.5rem] mt-[24px] truncate">
      {post.data.title}
    </div>

    <div class="text-xs leading-[1.125rem] mt-[16px] simple-card-desc">
      <div class="multiline-text text-content">
        {post.excerpt || post.data.description}
      </div>
    </div>
    {
      source === "learning" && (
        <div class="flex justify-between mt-[24px] text-xs">
          {post.data?.author ? (
            <div class="author">作者：{post.data?.author}</div>
          ) : (
            <div />
          )}
          <div class="text-primary">
            {post.data?.tags?.map((it) =>
              ALL_ARTICLE_TAG.map((obj) => {
                if (obj.type === it) {
                  return " #" + obj.title;
                }
              })
            )}
          </div>
        </div>
      )
    }
  </div>
</a>

<style is:global>
  .learning-box {
    .left-content {
      width: 40%;
      height: 11.25rem;
    }

    .right-content {
      width: 60%;
    }

    .author {
      color: #9295a5;
    }
  }
  .card {
    margin-bottom: 16px;
    flex-direction: row;
    transition:
      transform 0.2s,
      box-shadow 0.2s;
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .card-title {
      display: block;
      font-size: 1.125rem;
      font-weight: 500;
    }
    p {
      color: #9295a5;
    }
  }
  .card:hover {
    transition:
      transform 0.2s,
      box-shadow 0.2s;
    transform: translateY(-4px);
    box-shadow:
      4px 4px 8px rgba(0, 0, 0, 0.1),
      -4px -4px 8px rgba(0, 0, 0, 0.1);
  }
  a {
    text-decoration: none;
    color: inherit;
  }

  .simple-card-desc {
    width: 100%;
    overflow: hidden;

    .multiline-text {
      display: -webkit-box;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 3; /* 控制显示的行数 */
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
</style>
